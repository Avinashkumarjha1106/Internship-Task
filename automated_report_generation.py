# -*- coding: utf-8 -*-
"""Automated_Report_Generation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WpsH3bQmuXTITzq0BIMXrjMDAEZ22qRR
"""

#CSV file for student marks
student_data = """Name,Subject,Marks
Aarav,Mathematics,78
Isha,Mathematics,92
Kabir,Mathematics,85
Priya,Mathematics,74
Ananya,Mathematics,89
Rohan,Mathematics,68
Diya,Mathematics,94
Arjun,Mathematics,81
Sneha,Mathematics,72
Vivaan,Mathematics,88"""

# Write the student data to a CSV file
with open('student_marks.csv', 'w') as file:
    file.write(student_data)

print("CSV file 'student_marks.csv' created successfully.")

import os

# Check if the file was created
print(os.listdir())

!pip install reportlab

# Import necessary libraries
import csv
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Define input and output file paths
INPUT_FILE = 'student_marks.csv'  # Input CSV file containing data
OUTPUT_FILE = 'report.pdf'  # Output PDF file

# Function to read and analyze data from a CSV file
def read_and_analyze_data(file_path):
    """
    Reads data from a CSV file, calculates the total, average, and count for numeric columns.
    """
    data = []
    with open(file_path, 'r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            data.append(row)

    # Perform basic analysis using the 'Marks' column
    total = sum(float(row['Marks']) for row in data)  # Use 'Marks' instead of 'Value'
    average = total / len(data)
    count = len(data)

    return {
        'total': total,
        'average': average,
        'count': count,
        'data': data
    }

# Function to generate a formatted PDF report
def generate_pdf_report(data, output_file):
    """
    Generates a PDF report using the ReportLab library.
    """
    # Create a canvas for the PDF
    pdf = canvas.Canvas(output_file, pagesize=letter)
    width, height = letter

    # Title
    pdf.setFont("Helvetica-Bold", 16)
    pdf.drawString(50, height - 50, "Automated Data Analysis Report")

    # Summary Section
    pdf.setFont("Helvetica", 12)
    pdf.drawString(50, height - 100, f"Total Marks: {data['total']}")
    pdf.drawString(50, height - 120, f"Average Marks: {data['average']:.2f}")
    pdf.drawString(50, height - 140, f"Total Students: {data['count']}")

    # Table Header
    pdf.setFont("Helvetica-Bold", 12)
    pdf.drawString(50, height - 180, "Data Table:")
    pdf.setFont("Helvetica", 10)

    # Draw table
    x, y = 50, height - 200
    pdf.drawString(x, y, "Row")
    pdf.drawString(x + 50, y, "Name")
    pdf.drawString(x + 150, y, "Marks")
    y -= 20

    # Populate table rows
    for i, row in enumerate(data['data'], start=1):
        pdf.drawString(x, y, str(i))
        pdf.drawString(x + 50, y, row['Name'])
        pdf.drawString(x + 150, y, row['Marks'])
        y -= 20
        if y < 50:  # Start a new page if content exceeds current page
            pdf.showPage()
            y = height - 50

    # Save PDF
    pdf.save()

# Main function
if __name__ == "__main__":
    # Step 1: Read and analyze data
    analyzed_data = read_and_analyze_data(INPUT_FILE)

    # Step 2: Generate PDF report
    generate_pdf_report(analyzed_data, OUTPUT_FILE)

    print(f"Report successfully generated: {OUTPUT_FILE}")

from google.colab import files

# Download the generated PDF report
files.download('report.pdf')