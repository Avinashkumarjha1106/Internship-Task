# -*- coding: utf-8 -*-
"""MACHINE_LEARNING_MODEL_IMPLEMENTATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1W_J0qCztGCV_NGdznwG4bwnOCkdUPa
"""

# Import necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 1: Load and preprocess the dataset
# You can download a sample dataset like the SMS Spam Collection dataset (https://www.kaggle.com/uciml/sms-spam-collection-dataset)
# For demonstration, we'll simulate a dataset
data = {
    'EmailText': [
        "Congratulations! You've won a free ticket to Maldives.",
        "Reminder: Your bill is due tomorrow.",
        "Get cash back on every purchase using this card!",
        "Meeting rescheduled to 3 PM today.",
        "You have been selected for a free gift card. Click the link to claim.",
        "Hello, how are you doing?",
        "Win a lottery worth $10,000 now! Click here to claim.",
        "Can we reschedule our call to next Monday?",
        "Earn money from home with no effort. Sign up now!",
        "See you at the dinner tonight at 7 PM."
    ],
    'Label': ['spam', 'ham', 'spam', 'ham', 'spam', 'ham', 'spam', 'ham', 'spam', 'ham']
}

df = pd.DataFrame(data)

# Step 2: Feature extraction
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(df['EmailText'])  # Convert text to numeric features
y = df['Label']

# Step 3: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 4: Train the model
model = MultinomialNB()
model.fit(X_train, y_train)

# Step 5: Make predictions
y_pred = model.predict(X_test)

# Step 6: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

print("Model Accuracy:", accuracy)
print("\nConfusion Matrix:\n", conf_matrix)
print("\nClassification Report:\n", report)

# Step 7: Test with new input
new_emails = [
    "Claim your free cruise tickets now!",
    "Letâ€™s catch up over coffee tomorrow.",
    "Exclusive deal: Buy 1 get 1 free on all items!"
]
new_emails_transformed = vectorizer.transform(new_emails)
predictions = model.predict(new_emails_transformed)

for email, label in zip(new_emails, predictions):
    print(f"Email: '{email}' --> Prediction: {label}")